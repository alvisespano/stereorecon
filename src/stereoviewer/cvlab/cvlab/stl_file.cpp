#include "stl_file.h"
#include <fstream>
#include <iostream>

using std::ifstream;
using std::ofstream;
using std::string;
using std::vector;

namespace cvlab{

//file format:
        //LEN(bytes) TIPO                  DESC
        // 80        ASCII                 DESCRIZIONE (non iniziare con 'STL')
        //  4        UINT                  NÂ° Facce
        //----------------------------------------per ogni faccia
        //  4        FLOAT                 Normale  i
        //  4        FLOAT                 Normale  j
        //  4        FLOAT                 Normale  k
        //  4        FLOAT                 Vertice1 i
        //  4        FLOAT                 Vertice1 j
        //  4        FLOAT                 Vertice1 k
        //  4        FLOAT                 Vertice2 i
        //  4        FLOAT                 Vertice2 j
        //  4        FLOAT                 Vertice2 k
        //  4        FLOAT                 Vertice3 i
        //  4        FLOAT                 Vertice3 j
        //  4        FLOAT                 Vertice3 k
        //  2        UINT                  Attributi

string readString(ifstream& in,int size){
   char block[size+1];
   in.read(block,size);
   block[size] = 0;
   return string(block);
}

float readFloat(ifstream& in,bool sw){
   union{
      char b[4];
      float v;
   } dat1,dat2;
   in.read(dat1.b,4);
   if(sw){
      dat2.b[0] = dat1.b[3];
      dat2.b[1] = dat1.b[2];
      dat2.b[2] = dat1.b[1];
      dat2.b[3] = dat1.b[0];
   }else{
      dat2.b[0] = dat1.b[0];
      dat2.b[1] = dat1.b[1];
      dat2.b[2] = dat1.b[2];
      dat2.b[3] = dat1.b[3];
   }
   return dat2.v;
}

int readUInt32(ifstream& in,bool sw){
   union{
      char b[4];
      unsigned int v;
   } dat1,dat2;
   in.read(dat1.b,4);
   if(sw){
      dat2.b[0] = dat1.b[3];
      dat2.b[1] = dat1.b[2];
      dat2.b[2] = dat1.b[1];
      dat2.b[3] = dat1.b[0];
   }else{
      dat2.b[0] = dat1.b[0];
      dat2.b[1] = dat1.b[1];
      dat2.b[2] = dat1.b[2];
      dat2.b[3] = dat1.b[3];
   }
   return dat2.v;
}

unsigned short readUInt16(ifstream& in,bool sw){
   union{
      char b[2];
      unsigned short v;
   } dat1,dat2;
   in.read(dat1.b,2);
   if(sw){
      dat2.b[0] = dat1.b[1];
      dat2.b[1] = dat1.b[0];
   }else{
      dat2.b[0] = dat1.b[0];
      dat2.b[1] = dat1.b[1];
   }
   return dat2.v;
}

TriangleList* stl_file::load() const {
   //test endianness
   int8_t SwapTest[2] = { 1, 0 };
   bool swap = false;
   if( *(short *) SwapTest == 0 )
      swap = true;
   std::ifstream in(name.c_str(),std::ios::binary|std::ios::in );
   string id = readString(in,80);
   unsigned int n_facets = readUInt32(in,swap);
   TriangleList *result = new TriangleList(n_facets);

   for(unsigned int i=0;i<n_facets;++i){
      float x,y,z;
      x = readFloat(in,swap);
      y = readFloat(in,swap);
      z = readFloat(in,swap);
      point3d n(x,y,z);
      x = readFloat(in,swap);
      y = readFloat(in,swap);
      z = readFloat(in,swap);
      point3d p0(x,y,z);
      x = readFloat(in,swap);
      y = readFloat(in,swap);
      z = readFloat(in,swap);
      point3d p1(x,y,z);
      x = readFloat(in,swap);
      y = readFloat(in,swap);
      z = readFloat(in,swap);
      point3d p2(x,y,z);
      readUInt16(in,swap);
      (*result)[i]=triangle(p0,p1,p2,n);
   }
   in.close();
   return result;
}

void writeIntLI(std::ofstream& out,int32_t data,bool sw){
   union
   {
       int32_t f;
       unsigned char b[4];
   } dat1, dat2;

   dat1.f = data;
   if(sw){
      dat2.b[0] = dat1.b[3];
      dat2.b[1] = dat1.b[2];
      dat2.b[2] = dat1.b[1];
      dat2.b[3] = dat1.b[0];
      out.write((const char*)dat2.b,4);
   }else
      out.write((const char*)dat1.b,4);
}

void writeFloatLI(std::ofstream& out,float data,bool sw){
   union
   {
       float f;
       unsigned char b[4];
   } dat1, dat2;

   dat1.f = data;
   if(sw){
      dat2.b[0] = dat1.b[3];
      dat2.b[1] = dat1.b[2];
      dat2.b[2] = dat1.b[1];
      dat2.b[3] = dat1.b[0];
      out.write((const char*)dat2.b,4);
   }else
      out.write((const char*)dat1.b,4);
}

void writeShortLI(std::ofstream& out,int data,bool sw){
   union
   {
       short f;
       unsigned char b[2];
   } dat1, dat2;

   dat1.f = data;
   if(sw){
      dat2.b[0] = dat1.b[1];
      dat2.b[1] = dat1.b[0];
      out.write((const char*)dat2.b,2);
   }else
      out.write((const char*)dat1.b,2);
}

void stl_file::save(const vector<triangle> * triangles){
   //test endianness
   int8_t SwapTest[2] = { 1, 0 };
   bool swap = false;
   if( *(short *) SwapTest == 0 )
      swap = true;
   std::ofstream out(name.c_str(),std::ios::out|std::ios::binary);
   string header("BINARY STL generated by shapesearch system                                      ");
    out.write(header.c_str(),header.size());
    int facets = triangles->size();
    writeIntLI(out,facets,swap);
    for(int i=0;i<facets;i++){
        writeFloatLI(out,triangles->at(i).n.x,swap);
        writeFloatLI(out,triangles->at(i).n.y,swap);
        writeFloatLI(out,triangles->at(i).n.z,swap);
      writeFloatLI(out,triangles->at(i).p0.x,swap);
      writeFloatLI(out,triangles->at(i).p0.y,swap);
      writeFloatLI(out,triangles->at(i).p0.z,swap);
      writeFloatLI(out,triangles->at(i).p1.x,swap);
      writeFloatLI(out,triangles->at(i).p1.y,swap);
      writeFloatLI(out,triangles->at(i).p1.z,swap);
      writeFloatLI(out,triangles->at(i).p2.x,swap);
      writeFloatLI(out,triangles->at(i).p2.y,swap);
      writeFloatLI(out,triangles->at(i).p2.z,swap);
        writeShortLI(out,0,swap);
    }
   out.close();
}

}
